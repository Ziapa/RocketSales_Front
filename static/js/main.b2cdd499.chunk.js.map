{"version":3,"sources":["types/typesLeads.ts","components/Cards.tsx","DAL/API.ts","App.tsx","store/actionCreators/leads.ts","store/reducers/leadsReducer.ts","store/reducers/indext.ts","store/index.ts","index.tsx","components/Cards.module.css"],"names":["LeadsActionTypes","Cards","props","createDate","moment","created_at","locale","format","className","s","cardsContainer","title","name","style","width","tags","map","el","marginLeft","backgroundColor","status","color","responsibleUser","price","instance","axios","create","baseURL","headers","leadsAPI","get","id","App","dispatch","useDispatch","useEffect","a","type","FETCH_USERS","responseLeads","responseStatuses","responseContacts","FETCH_LEADS_SUCCESS","payload","data","_embedded","leads","FETCH_STATUSES_SUCCESS","statuses","FETCH_CONTACTS_SUCCESS","contacts","FETCH_USERS_ERROR","useSelector","state","find","userName","responsible_user_id","status_id","leadsInitialState","loading","error","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.b2cdd499.chunk.js","sourcesContent":["export type DealsStateType = {\r\n    leads: Array<TypesLeads>,\r\n    statuses: Array<StatusesType>,\r\n    contacts: Array<UsersType>,\r\n    loading: boolean,\r\n    error: null | string\r\n}\r\n\r\nexport type TypesLeads = {\r\n    account_id: number\r\n    closed_at: null\r\n    closest_task_at: null\r\n    created_at: number\r\n    created_by: number\r\n    custom_fields_values: null\r\n    group_id: number\r\n    id: number\r\n    is_deleted: boolean\r\n    loss_reason_id: null\r\n    name: string\r\n    pipeline_id: number\r\n    price: number\r\n    responsible_user_id: number\r\n    score: null\r\n    status_id: number\r\n    updated_at: number\r\n    updated_by: number\r\n    _embedded: {\r\n        tags: Array<TagsType>\r\n    }\r\n}\r\n\r\nexport type TagsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport type StatusesType = {\r\n    account_id: number\r\n    color: string\r\n    id: number\r\n    is_editable: boolean\r\n    name: string\r\n    pipeline_id: number\r\n    sort: number\r\n    type: number\r\n}\r\n\r\nexport type UsersType = {\r\n    account_id: number\r\n    closest_task_at: null\r\n    created_at: number\r\n    created_by: number\r\n    first_name: string\r\n    group_id: number\r\n    id: number\r\n    is_deleted: boolean\r\n    is_unsorted: boolean\r\n    last_name: string\r\n    name: string\r\n    responsible_user_id: number\r\n    updated_at: number\r\n    updated_by: number\r\n}\r\n\r\nexport enum LeadsActionTypes {\r\n    FETCH_USERS = \"FETCH_USERS\",\r\n    FETCH_LEADS_SUCCESS = \"FETCH_LEADS_SUCCESS\",\r\n    FETCH_STATUSES_SUCCESS = \"FETCH_STATUSES_SUCCESS\",\r\n    FETCH_CONTACTS_SUCCESS = \"FETCH_CONTACTS_SUCCESS\",\r\n    FETCH_USERS_ERROR = \"FETCH_USERS_ERROR\",\r\n}\r\n\r\ntype FetchLeadsAction = {\r\n    type: \"FETCH_USERS\"\r\n}\r\ntype FetchLeadsSuccessAction = {\r\n    type: \"FETCH_LEADS_SUCCESS\"\r\n    payload: any[]\r\n}\r\ntype FetchStatusesSuccessAction = {\r\n    type: \"FETCH_STATUSES_SUCCESS\"\r\n    payload: any[]\r\n}\r\ntype FetchContactsSuccessAction = {\r\n    type: \"FETCH_CONTACTS_SUCCESS\"\r\n    payload: any[]\r\n}\r\ntype FetchLeadsErrorAction = {\r\n    type: \"FETCH_USERS_ERROR\"\r\n    payload: string\r\n}\r\n\r\nexport type  LeadsActionsType =\r\n    FetchLeadsAction\r\n    | FetchLeadsSuccessAction\r\n    | FetchLeadsErrorAction\r\n    | FetchStatusesSuccessAction\r\n    | FetchContactsSuccessAction\r\n\r\n","import React from \"react\";\r\nimport {Card} from \"antd\";\r\nimport s from \"./Cards.module.css\"\r\nimport moment from \"moment\";\r\nimport { TagsType } from \"../types/typesLeads\";\r\n\r\ntype CardType = {\r\n    name: string\r\n    status: { name: string, color: string }\r\n    responsibleUser: string\r\n    created_at: number\r\n    price: number\r\n    tags: Array<TagsType>\r\n}\r\n\r\nexport const Cards = (props: CardType) => {\r\n    \r\n    const createDate = moment(props.created_at).locale(\"ru\").format('D.MM.YYYY');\r\n\r\n    return (\r\n\r\n        <div className={s.cardsContainer}>\r\n            <Card\r\n                title={props.name}\r\n                style={{width: 300}}>\r\n                <div  >{props.tags.map(el => <span style={{ marginLeft: \"5px\", backgroundColor: \"gray\"}}>{el.name}</span> )}</div>\r\n                <p style={{backgroundColor: `${props.status.color}`}}> {props.status.name} </p>\r\n                <p>{props.responsibleUser}</p>\r\n                <p>{createDate}</p>\r\n                <p>{props.price}</p>\r\n            </Card>\r\n\r\n        </div>\r\n    )\r\n}","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: \"https://rocketsales.herokuapp.com/\",\r\n    headers: {\r\n        'Access-Control-Allow-Origin': '*',\r\n        'Access-Control-Allow-Credentials': 'true'\r\n    },\r\n\r\n\r\n})\r\n\r\nexport const leadsAPI = {\r\n    getLeads() {\r\n        return instance.get(\"leads\")\r\n    },\r\n\r\n    getLead(id:string) {\r\n        return instance.get(`leads/${id}`)\r\n    },\r\n\r\n    getContacts () {\r\n        return instance.get(\"contacts\")\r\n    },\r\n\r\n    getContact (id: number) {\r\n        return instance.get(`contacts/${id}`)\r\n    },\r\n\r\n    getPipelines () {\r\n        return instance.get(\"pipelines\")\r\n    },\r\n\r\n    getStatuses (id: number) {\r\n        return instance.get(`statuses/${id}`)\r\n    },\r\n\r\n    getStatus (id: number, pipeline_id: number) {\r\n        return instance.get(`pipelines/${pipeline_id}/statuses/${id}`)\r\n    },\r\n}","import React, { useEffect } from 'react';\nimport './App.css';\nimport {Cards} from './components/Cards';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport { RootState } from './store/reducers/indext';\nimport {fetchLeads} from \"./store/actionCreators/leads\";\nimport {StatusesType, TypesLeads, UsersType} from \"./types/typesLeads\";\n\nfunction App() {\n\n\n\n\n\n\n    const dispatch = useDispatch()\n\n    useEffect(() =>  {\n        dispatch(fetchLeads())\n    }, [])\n\n    const leads = useSelector<RootState, Array<TypesLeads>>( state => state.leads.leads)\n    const statuses = useSelector<RootState, Array<StatusesType>>( state => state.leads.statuses)\n    const contacts = useSelector<RootState, Array<UsersType>>( state => state.leads.contacts)\n\n    const status = (id: number): { name: string, color: string } => {\n\n        const status = statuses.find(status => status.id === id)\n\n        if (status)\n            return status\n        return {name: 'string', color: 'string'}\n    }\n    const userName = (id: number): { id: number, name: string } => {\n\n        const userName = contacts.find(contacts => contacts.responsible_user_id === id)\n        if (userName) {\n            return userName\n        }\n        return { id: 999, name: \"string\" }\n    }\n\n\n\n    return (\n        <div className=\"App\">\n\n            {leads.map(el =>\n                <Cards\n                    tags={el._embedded.tags}\n                    name={el.name}\n                       status={status(el.status_id)}\n                       responsibleUser={userName(el.responsible_user_id).name}\n                       created_at={el.created_at}\n                       price={el.price}/>\n            )}\n\n        </div>\n    );\n}\n\nexport default App;\n","import {LeadsActionsType, LeadsActionTypes} from \"../../types/typesLeads\";\r\nimport {Dispatch} from \"redux\";\r\nimport {leadsAPI} from \"../../DAL/API\";\r\n\r\n\r\nexport const fetchLeads = () => {\r\n    return async (dispatch: Dispatch<LeadsActionsType>) => {\r\n        try {\r\n            dispatch({type: LeadsActionTypes.FETCH_USERS})\r\n            const responseLeads = await leadsAPI.getLeads()\r\n            const responseStatuses = await leadsAPI.getStatuses(4904053)\r\n            const responseContacts = await leadsAPI.getContacts()\r\n            dispatch({type: LeadsActionTypes.FETCH_LEADS_SUCCESS, payload: responseLeads.data._embedded.leads})\r\n            dispatch({type: LeadsActionTypes.FETCH_STATUSES_SUCCESS, payload: responseStatuses.data._embedded.statuses})\r\n            dispatch({type: LeadsActionTypes.FETCH_CONTACTS_SUCCESS, payload: responseContacts.data._embedded.contacts})\r\n        } catch (e) {\r\n        dispatch({type: LeadsActionTypes.FETCH_USERS_ERROR,payload: \"Произошла ошибка при загрузки данных\"})\r\n        }\r\n\r\n    }\r\n}\r\n","import {LeadsActionsType, LeadsActionTypes, DealsStateType} from \"../../types/typesLeads\";\r\n\r\nconst leadsInitialState: DealsStateType = {\r\n    leads: [],\r\n    statuses: [],\r\n    contacts: [],\r\n    loading: false,\r\n    error: null\r\n}\r\n\r\nexport const leadsReducer = (state = leadsInitialState, action: LeadsActionsType): DealsStateType => {\r\n    switch (action.type) {\r\n        case LeadsActionTypes.FETCH_USERS:\r\n            return {...state, loading: true, error: null}\r\n        case LeadsActionTypes.FETCH_LEADS_SUCCESS:\r\n            return {...state, error: null, leads: action.payload}\r\n        case LeadsActionTypes.FETCH_STATUSES_SUCCESS:\r\n            return {...state, error: null, statuses: action.payload}\r\n        case LeadsActionTypes.FETCH_CONTACTS_SUCCESS:\r\n            return {...state, loading: false, contacts: action.payload}\r\n        default:\r\n            return state\r\n\r\n    }\r\n}","import {combineReducers} from \"redux\";\r\nimport {leadsReducer} from \"./leadsReducer\";\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    leads: leadsReducer\r\n})\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>","import {applyMiddleware, createStore} from \"redux\";\r\nimport {rootReducer} from \"./reducers/indext\";\r\nimport thunk from \"redux-thunk\";\r\n\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\n\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store\";\n\nReactDOM.render(\n <Provider store={store}>\n    <App />\n </Provider>\n    ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardsContainer\":\"Cards_cardsContainer__3iAqK\"};"],"sourceRoot":""}